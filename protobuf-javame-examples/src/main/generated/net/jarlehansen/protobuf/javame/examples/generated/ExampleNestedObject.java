package net.jarlehansen.protobuf.javame.examples.generated;
// Generated by proto2javame, Fri Oct 08 19:03:57 CEST 2010.

import java.io.IOException;
import java.io.InputStream;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class ExampleNestedObject extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final Number number;
	private static final int fieldNumberNumber = 1;


	public static Builder newBuilder() {
		return new Builder();
	}

	private ExampleNestedObject(final Builder builder) {
		if (builder.hasNumber ) {
			this.number = builder.number;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" number:" + builder.hasNumber + "");
		}
	}

	public static class Builder {
		private Number number;
		private boolean hasNumber = false;


		private Builder() {
		}

		public Builder setNumber(final Number number) {
			this.number = number;
			this.hasNumber = true;
			return this;
		}

		public ExampleNestedObject build() {
			return new ExampleNestedObject(this);
		}
	}

	public Number getNumber() {
		return number;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "number = " + this.number + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberNumber, number.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeMessage(fieldNumberNumber, number.computeSize());
		number.writeFields(writer);
		writer.writeData();
	}

	static ExampleNestedObject parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final ExampleNestedObject.Builder builder = ExampleNestedObject.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberNumber:
				reader.readMessageStart();
				Number.Builder builderNumber = Number.newBuilder();

				boolean boolNumber = true;
				int nestedFieldNumber = -1;
				while(boolNumber) {
					nestedFieldNumber = getNextFieldNumber(reader);
					boolNumber = Number.populateBuilderWithField(reader, builderNumber, nestedFieldNumber);
				}

				builder.setNumber(builderNumber.build());
				populateBuilderWithField(reader, builder, nestedFieldNumber);
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ExampleNestedObject.unknownTagHandler = unknownTagHandler;
	}

	public static ExampleNestedObject parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static ExampleNestedObject parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static ExampleNestedObject parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}