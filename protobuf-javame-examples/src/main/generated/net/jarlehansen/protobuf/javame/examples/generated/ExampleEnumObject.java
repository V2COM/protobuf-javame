package net.jarlehansen.protobuf.javame.examples.generated;
// Generated by proto2javame, Fri Oct 08 19:03:56 CEST 2010.

import java.io.IOException;
import java.io.InputStream;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class ExampleEnumObject extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector color;
	private static final int fieldNumberColor = 1;


	public static Builder newBuilder() {
		return new Builder();
	}

	private ExampleEnumObject(final Builder builder) {
		if (true) {
			this.color = builder.color;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				"");
		}
	}

	public static class Color {
		public static int RED = 1;
		public static int BLUE = 2;

		public static String getStringValue(int value) {
			String retValue;

			switch(value) {
				case 1:
					retValue = "RED";
					break;
				case 2:
					retValue = "BLUE";
					break;
				default:
					retValue = "";
					break;
			}

			return retValue;
		}
	}

	public static class Builder {
		private java.util.Vector color = new java.util.Vector();
		private boolean hasColor = false;


		private Builder() {
		}

		public Builder setColor(final java.util.Vector color) {
			if(!hasColor) {
				hasColor = true;
			}
			this.color = color;
			return this;
		}


		public Builder addElementColor(final int element) {
			if(!hasColor) {
				hasColor = true;
			}
			color.addElement(new Integer(element));
			return this;
		}

		public ExampleEnumObject build() {
			return new ExampleEnumObject(this);
		}
	}

	public java.util.Vector getColor() {
		return color;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "color = " + this.color + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberColor, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, color);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberColor, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, color);
		writer.writeData();
	}

	static ExampleEnumObject parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final ExampleEnumObject.Builder builder = ExampleEnumObject.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberColor:
				builder.addElementColor(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ExampleEnumObject.unknownTagHandler = unknownTagHandler;
	}

	public static ExampleEnumObject parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static ExampleEnumObject parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static ExampleEnumObject parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}