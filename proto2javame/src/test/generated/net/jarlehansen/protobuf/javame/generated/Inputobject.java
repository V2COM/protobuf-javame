package net.jarlehansen.protobuf.javame.generated;
// Generated by proto2javame. DO NOT EDIT!

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import com.google.protobuf.UninitializedMessageException;
import com.google.protobuf.javame.JavaMeProtoFactory;
import com.google.protobuf.javame.input.InputReader;
import com.google.protobuf.javame.output.ComputeSizeUtil;
import com.google.protobuf.javame.output.OutputWriter;

public final class Inputobject {
	private final long number1;
	private static final int fieldNumberNumber1 = 1;

	private final int number2;
	private static final int fieldNumberNumber2 = 2;
	private final boolean hasNumber2;

	private final com.google.protobuf.ByteString bytestringValue;
	private static final int fieldNumberBytestringValue = 3;

	private final java.util.Vector stringList;
	private static final int fieldNumberStringList = 4;

	private final int number3;
	private static final int fieldNumberNumber3 = 5;

	private final String value;
	private static final int fieldNumberValue = 6;

	private final java.util.Vector test;
	private static final int fieldNumberTest = 7;


	public static Builder newBuilder() {
		return new Builder();
	}

	private Inputobject(final Builder builder) {
		if (builder.hasNumber1 && builder.hasBytestringValue && builder.hasNumber3 && builder.hasValue ) {
			this.number1 = builder.number1;
			this.number2 = builder.number2;
			this.hasNumber2 = builder.hasNumber2;
			this.bytestringValue = builder.bytestringValue;
			this.stringList = builder.stringList;
			this.number3 = builder.number3;
			this.value = builder.value;
			this.test = builder.test;
		} else {
			throw new UninitializedMessageException("Not all required fields were included, " + 
				" number1:" + builder.hasNumber1 + " bytestringValue:" + builder.hasBytestringValue + " number3:" + builder.hasNumber3 + " value:" + builder.hasValue + ", all fields that are false are mandatory but were not added");
		}
	}

	public static class Builder {
		private long number1;
		private boolean hasNumber1 = false;

		private int number2;
		private boolean hasNumber2 = false;

		private com.google.protobuf.ByteString bytestringValue;
		private boolean hasBytestringValue = false;

		private java.util.Vector stringList = new java.util.Vector();
		private boolean hasStringList = false;

		private int number3;
		private boolean hasNumber3 = false;

		private String value;
		private boolean hasValue = false;

		private java.util.Vector test = new java.util.Vector();
		private boolean hasTest = false;


		private Builder() {
		}

		public Builder setNumber1(final long number1) {
			this.number1 = number1;
			this.hasNumber1 = true;
			return this;
		}

		public Builder setNumber2(final int number2) {
			this.number2 = number2;
			this.hasNumber2 = true;
			return this;
		}

		public Builder setBytestringValue(final com.google.protobuf.ByteString bytestringValue) {
			this.bytestringValue = bytestringValue;
			this.hasBytestringValue = true;
			return this;
		}

		public Builder setStringList(final java.util.Vector stringList) {
			if(!hasStringList) {
				hasStringList = true;
			}
			this.stringList = stringList;
			return this;
		}


		public Builder addElementStringList(final String element) {
			if(!hasStringList) {
				hasStringList = true;
			}
			stringList.addElement(element);
			return this;
		}

		public Builder setNumber3(final int number3) {
			this.number3 = number3;
			this.hasNumber3 = true;
			return this;
		}

		public Builder setValue(final String value) {
			this.value = value;
			this.hasValue = true;
			return this;
		}

		public Builder setTest(final java.util.Vector test) {
			if(!hasTest) {
				hasTest = true;
			}
			this.test = test;
			return this;
		}


		public Builder addElementTest(final boolean element) {
			if(!hasTest) {
				hasTest = true;
			}
			test.addElement(element);
			return this;
		}

		public Inputobject build() {
			return new Inputobject(this);
		}
	}

	public long getNumber1() {
		return number1;
	}

	public int getNumber2() {
		return number2;
	}

	public boolean hasNumber2() {
		return hasNumber2;
	}

	public com.google.protobuf.ByteString getBytestringValue() {
		return bytestringValue;
	}

	public java.util.Vector getStringList() {
		return stringList;
	}

	public int getNumber3() {
		return number3;
	}

	public String getValue() {
		return value;
	}

	public java.util.Vector getTest() {
		return test;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "number1 = " + this.number1 + TAB;
		if(hasNumber2) {
			retValue += "number2 = " + this.number2 + TAB;
		}
		retValue += "bytestringValue = " + this.bytestringValue + TAB;
		retValue += "stringList = " + this.stringList + TAB;
		retValue += "number3 = " + this.number3 + TAB;
		retValue += "value = " + this.value + TAB;
		retValue += "test = " + this.test + TAB;
		retValue += ")";

		return retValue;
	}

	public byte[] toByteArray() throws IOException {
		final byte[] outputData = createByteArray();
		writeTo(outputData);

		return outputData;
	}

	public void writeTo(final byte[] data) throws IOException {
		final OutputWriter writer = JavaMeProtoFactory.createOutputUtil(data);
		writeFields(writer);
		writer.writeData();
	}

	public void writeTo(final OutputStream outputStream) throws IOException {
		final byte[] outputData = createByteArray();

		final OutputWriter writer = JavaMeProtoFactory.createOutputUtil(outputData, outputStream);
		writeFields(writer);
		writer.writeData();
	}

	private byte[] createByteArray() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeLongSize(fieldNumberNumber1, number1);
		if(hasNumber2) {
			totalSize += ComputeSizeUtil.computeIntSize(fieldNumberNumber2, number2);
		}
		totalSize += ComputeSizeUtil.computeByteStringSize(fieldNumberBytestringValue, bytestringValue);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberStringList, com.google.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, stringList);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberNumber3, number3);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberValue, value);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTest, com.google.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, test);

		return new byte[totalSize];
	}

	private void writeFields(final OutputWriter writer) throws IOException {
		writer.writeLong(fieldNumberNumber1, number1);
		if(hasNumber2) {
			writer.writeInt(fieldNumberNumber2, number2);
		}
		writer.writeByteString(fieldNumberBytestringValue, bytestringValue);
		writer.writeList(fieldNumberStringList, com.google.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, stringList);
		writer.writeInt(fieldNumberNumber3, number3);
		writer.writeString(fieldNumberValue, value);
		writer.writeList(fieldNumberTest, com.google.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, test);
	}

	private static Inputobject parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = reader.getNextFieldNumber();
		final Inputobject.Builder builder = new Inputobject.Builder();

		while (nextFieldNumber > 0) {
			switch (nextFieldNumber) {
			case fieldNumberNumber1:
				builder.setNumber1(reader.readLong(nextFieldNumber));
				break;
			case fieldNumberNumber2:
				builder.setNumber2(reader.readInt(nextFieldNumber));
				break;
			case fieldNumberBytestringValue:
				builder.setBytestringValue(reader.readByteString(nextFieldNumber));
				break;
			case fieldNumberStringList:
				builder.addElementStringList(reader.readString(nextFieldNumber));
				break;
			case fieldNumberNumber3:
				builder.setNumber3(reader.readInt(nextFieldNumber));
				break;
			case fieldNumberValue:
				builder.setValue(reader.readString(nextFieldNumber));
				break;
			case fieldNumberTest:
				builder.addElementTest(reader.readBoolean(nextFieldNumber));
				break;
			default:
				throw new IllegalStateException("Unsupported field number, the input field was " + nextFieldNumber);
			}

			nextFieldNumber = reader.getNextFieldNumber();
		}

		return builder.build();
	}

	public static Inputobject parseFrom(final byte[] data) throws IOException {
		return parseFields(JavaMeProtoFactory.createInputUtil(data));
	}

	public static Inputobject parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(JavaMeProtoFactory.createInputUtil(inputStream));
	}
}