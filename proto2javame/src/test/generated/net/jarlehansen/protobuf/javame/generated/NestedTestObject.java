package net.jarlehansen.protobuf.javame.generated;
// Generated by proto2javame, Sat Sep 04 22:41:01 CEST 2010.

import java.io.IOException;
import java.io.InputStream;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class NestedTestObject extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final long number1;
	private static final int fieldNumberNumber1 = 1;

	private final int number2;
	private static final int fieldNumberNumber2 = 2;
	private final boolean hasNumber2;

	private final net.jarlehansen.protobuf.javame.ByteString bytestringValue;
	private static final int fieldNumberBytestringValue = 3;

	private final java.util.Vector stringList;
	private static final int fieldNumberStringList = 4;

	private final int number3;
	private static final int fieldNumberNumber3 = 5;

	private final String value;
	private static final int fieldNumberValue = 6;

	private final java.util.Vector test;
	private static final int fieldNumberTest = 7;

	private final int color;
	private static final int fieldNumberColor = 8;

	private final java.util.Vector direction;
	private static final int fieldNumberDirection = 9;

	private final NestedTestObject2 nestedObj;
	private static final int fieldNumberNestedObj = 10;
	private final boolean hasNestedObj;

	private final java.util.Vector nestedObj2;
	private static final int fieldNumberNestedObj2 = 11;


	public static Builder newBuilder() {
		return new Builder();
	}

	private NestedTestObject(final Builder builder) {
		if (builder.hasNumber1 && builder.hasBytestringValue && builder.hasNumber3 && builder.hasValue && builder.hasColor ) {
			this.number1 = builder.number1;
			this.number2 = builder.number2;
			this.hasNumber2 = builder.hasNumber2;
			this.bytestringValue = builder.bytestringValue;
			this.stringList = builder.stringList;
			this.number3 = builder.number3;
			this.value = builder.value;
			this.test = builder.test;
			this.color = builder.color;
			this.direction = builder.direction;
			this.nestedObj = builder.nestedObj;
			this.hasNestedObj = builder.hasNestedObj;
			this.nestedObj2 = builder.nestedObj2;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" number1:" + builder.hasNumber1 + " bytestringValue:" + builder.hasBytestringValue + " number3:" + builder.hasNumber3 + " value:" + builder.hasValue + " color:" + builder.hasColor + "");
		}
	}

	public static class Direction {
		public static int UP = 1;
		public static int DOWN = 2;
		public static int RIGHT = 3;
		public static int LEFT = 4;

		public static String getStringValue(int value) {
			String retValue;

			switch(value) {
				case 1:
					retValue = "UP";
					break;
				case 2:
					retValue = "DOWN";
					break;
				case 3:
					retValue = "RIGHT";
					break;
				case 4:
					retValue = "LEFT";
					break;
				default:
					retValue = "";
					break;
			}

			return retValue;
		}
	}

	public static class Color {
		public static int BLUE = 1;
		public static int RED = 2;

		public static String getStringValue(int value) {
			String retValue;

			switch(value) {
				case 1:
					retValue = "BLUE";
					break;
				case 2:
					retValue = "RED";
					break;
				default:
					retValue = "";
					break;
			}

			return retValue;
		}
	}

	public static class Builder {
		private long number1;
		private boolean hasNumber1 = false;

		private int number2;
		private boolean hasNumber2 = false;

		private net.jarlehansen.protobuf.javame.ByteString bytestringValue;
		private boolean hasBytestringValue = false;

		private java.util.Vector stringList = new java.util.Vector();
		private boolean hasStringList = false;

		private int number3;
		private boolean hasNumber3 = false;

		private String value;
		private boolean hasValue = false;

		private java.util.Vector test = new java.util.Vector();
		private boolean hasTest = false;

		private int color;
		private boolean hasColor = false;

		private java.util.Vector direction = new java.util.Vector();
		private boolean hasDirection = false;

		private NestedTestObject2 nestedObj;
		private boolean hasNestedObj = false;

		private java.util.Vector nestedObj2 = new java.util.Vector();
		private boolean hasNestedObj2 = false;


		private Builder() {
		}

		public Builder setNumber1(final long number1) {
			this.number1 = number1;
			this.hasNumber1 = true;
			return this;
		}

		public Builder setNumber2(final int number2) {
			this.number2 = number2;
			this.hasNumber2 = true;
			return this;
		}

		public Builder setBytestringValue(final net.jarlehansen.protobuf.javame.ByteString bytestringValue) {
			this.bytestringValue = bytestringValue;
			this.hasBytestringValue = true;
			return this;
		}

		public Builder setStringList(final java.util.Vector stringList) {
			if(!hasStringList) {
				hasStringList = true;
			}
			this.stringList = stringList;
			return this;
		}


		public Builder addElementStringList(final String element) {
			if(!hasStringList) {
				hasStringList = true;
			}
			stringList.addElement(element);
			return this;
		}

		public Builder setNumber3(final int number3) {
			this.number3 = number3;
			this.hasNumber3 = true;
			return this;
		}

		public Builder setValue(final String value) {
			this.value = value;
			this.hasValue = true;
			return this;
		}

		public Builder setTest(final java.util.Vector test) {
			if(!hasTest) {
				hasTest = true;
			}
			this.test = test;
			return this;
		}


		public Builder addElementTest(final boolean element) {
			if(!hasTest) {
				hasTest = true;
			}
			test.addElement(new Boolean(element));
			return this;
		}

		public Builder setColor(final int color) {
			this.color = color;
			this.hasColor = true;
			return this;
		}

		public Builder setDirection(final java.util.Vector direction) {
			if(!hasDirection) {
				hasDirection = true;
			}
			this.direction = direction;
			return this;
		}


		public Builder addElementDirection(final int element) {
			if(!hasDirection) {
				hasDirection = true;
			}
			direction.addElement(new Integer(element));
			return this;
		}

		public Builder setNestedObj(final NestedTestObject2 nestedObj) {
			this.nestedObj = nestedObj;
			this.hasNestedObj = true;
			return this;
		}

		public Builder setNestedObj2(final java.util.Vector nestedObj2) {
			if(!hasNestedObj2) {
				hasNestedObj2 = true;
			}
			this.nestedObj2 = nestedObj2;
			return this;
		}


		public Builder addElementNestedObj2(final NestedTestObject4 element) {
			if(!hasNestedObj2) {
				hasNestedObj2 = true;
			}
			nestedObj2.addElement(element);
			return this;
		}

		public NestedTestObject build() {
			return new NestedTestObject(this);
		}
	}

	public long getNumber1() {
		return number1;
	}

	public int getNumber2() {
		return number2;
	}

	public boolean hasNumber2() {
		return hasNumber2;
	}

	public net.jarlehansen.protobuf.javame.ByteString getBytestringValue() {
		return bytestringValue;
	}

	public java.util.Vector getStringList() {
		return stringList;
	}

	public int getNumber3() {
		return number3;
	}

	public String getValue() {
		return value;
	}

	public java.util.Vector getTest() {
		return test;
	}

	public int getColor() {
		return color;
	}

	public java.util.Vector getDirection() {
		return direction;
	}

	public NestedTestObject2 getNestedObj() {
		return nestedObj;
	}

	public boolean hasNestedObj() {
		return hasNestedObj;
	}

	public java.util.Vector getNestedObj2() {
		return nestedObj2;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "number1 = " + this.number1 + TAB;
		if(hasNumber2) retValue += "number2 = " + this.number2 + TAB;
		retValue += "bytestringValue = " + this.bytestringValue + TAB;
		retValue += "stringList = " + this.stringList + TAB;
		retValue += "number3 = " + this.number3 + TAB;
		retValue += "value = " + this.value + TAB;
		retValue += "test = " + this.test + TAB;
		retValue += "color = " + this.color + TAB;
		retValue += "direction = " + this.direction + TAB;
		if(hasNestedObj) retValue += "nestedObj = " + this.nestedObj + TAB;
		retValue += "nestedObj2 = " + this.nestedObj2 + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeLongSize(fieldNumberNumber1, number1);
		if(hasNumber2) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberNumber2, number2);
		totalSize += ComputeSizeUtil.computeByteStringSize(fieldNumberBytestringValue, bytestringValue);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberStringList, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, stringList);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberNumber3, number3);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberValue, value);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTest, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, test);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberColor, color);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberDirection, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, direction);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasNestedObj) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberNestedObj, nestedObj.computeSize());
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberNestedObj2, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, nestedObj2);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeLong(fieldNumberNumber1, number1);
		if(hasNumber2) writer.writeInt(fieldNumberNumber2, number2);
		writer.writeByteString(fieldNumberBytestringValue, bytestringValue);
		writer.writeList(fieldNumberStringList, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, stringList);
		writer.writeInt(fieldNumberNumber3, number3);
		writer.writeString(fieldNumberValue, value);
		writer.writeList(fieldNumberTest, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, test);
		writer.writeInt(fieldNumberColor, color);
		writer.writeList(fieldNumberDirection, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, direction);
		if(hasNestedObj) { writer.writeMessage(fieldNumberNestedObj, nestedObj.computeSize()); nestedObj.writeFields(writer); }
		writer.writeList(fieldNumberNestedObj2, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, nestedObj2);
		writer.writeData();
	}

	static NestedTestObject parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final NestedTestObject.Builder builder = NestedTestObject.newBuilder();

		while (nextFieldNumber > 0) {
			populateBuilderWithField(reader, builder, nextFieldNumber);
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static void populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		switch (fieldNumber) {
			case fieldNumberNumber1:
				builder.setNumber1(reader.readLong(fieldNumber));
				break;
			case fieldNumberNumber2:
				builder.setNumber2(reader.readInt(fieldNumber));
				break;
			case fieldNumberBytestringValue:
				builder.setBytestringValue(reader.readByteString(fieldNumber));
				break;
			case fieldNumberStringList:
				builder.addElementStringList(reader.readString(fieldNumber));
				break;
			case fieldNumberNumber3:
				builder.setNumber3(reader.readInt(fieldNumber));
				break;
			case fieldNumberValue:
				builder.setValue(reader.readString(fieldNumber));
				break;
			case fieldNumberTest:
				builder.addElementTest(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberColor:
				builder.setColor(reader.readInt(fieldNumber));
				break;
			case fieldNumberDirection:
				builder.addElementDirection(reader.readInt(fieldNumber));
				break;
			case fieldNumberNestedObj:
				reader.readMessageStart();
				NestedTestObject2.Builder builderNestedObj = NestedTestObject2.newBuilder();
				NestedTestObject2.populateBuilderWithField(reader, builderNestedObj, getNextFieldNumber(reader));
				builder.setNestedObj(builderNestedObj.build());
				break;
			case fieldNumberNestedObj2:
				reader.readMessageStart();
				NestedTestObject4.Builder builderNestedObj2 = NestedTestObject4.newBuilder();
				NestedTestObject4.populateBuilderWithField(reader, builderNestedObj2, getNextFieldNumber(reader));
				builder.addElementNestedObj2(builderNestedObj2.build());
				break;
		default:
			reader.getPreviousTagDataTypeAndReadContent();
		}
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		NestedTestObject.unknownTagHandler = unknownTagHandler;
	}

	public static NestedTestObject parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static NestedTestObject parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static NestedTestObject parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}