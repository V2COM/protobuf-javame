package net.jarlehansen.proto2javame.protobuf.integration.tempfiles.javame;
// Generated by proto2javame, Wed Feb 23 16:36:01 CET 2011.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class EmployeeGoalCommentJavaMe extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String author;
	private static final int fieldNumberAuthor = 1;
	private final boolean hasAuthor;

	private final String comment;
	private static final int fieldNumberComment = 2;
	private final boolean hasComment;

	private final long createDate;
	private static final int fieldNumberCreateDate = 3;
	private final boolean hasCreateDate;


	public static Builder newBuilder() {
		return new Builder();
	}

	private EmployeeGoalCommentJavaMe(final Builder builder) {
		if (true) {
			this.author = builder.author;
			this.hasAuthor = builder.hasAuthor;
			this.comment = builder.comment;
			this.hasComment = builder.hasComment;
			this.createDate = builder.createDate;
			this.hasCreateDate = builder.hasCreateDate;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				"");
		}
	}

	public static class Builder {
		private String author;
		private boolean hasAuthor = false;

		private String comment;
		private boolean hasComment = false;

		private long createDate;
		private boolean hasCreateDate = false;


		private Builder() {
		}

		public Builder setAuthor(final String author) {
			this.author = author;
			this.hasAuthor = true;
			return this;
		}

		public Builder setComment(final String comment) {
			this.comment = comment;
			this.hasComment = true;
			return this;
		}

		public Builder setCreateDate(final long createDate) {
			this.createDate = createDate;
			this.hasCreateDate = true;
			return this;
		}

		public EmployeeGoalCommentJavaMe build() {
			return new EmployeeGoalCommentJavaMe(this);
		}
	}

	public String getAuthor() {
		return author;
	}

	public boolean hasAuthor() {
		return hasAuthor;
	}

	public String getComment() {
		return comment;
	}

	public boolean hasComment() {
		return hasComment;
	}

	public long getCreateDate() {
		return createDate;
	}

	public boolean hasCreateDate() {
		return hasCreateDate;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasAuthor) retValue += "author = " + this.author + TAB;
		if(hasComment) retValue += "comment = " + this.comment + TAB;
		if(hasCreateDate) retValue += "createDate = " + this.createDate + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasAuthor) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberAuthor, author);
		if(hasComment) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberComment, comment);
		if(hasCreateDate) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberCreateDate, createDate);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasAuthor) writer.writeString(fieldNumberAuthor, author);
		if(hasComment) writer.writeString(fieldNumberComment, comment);
		if(hasCreateDate) writer.writeLong(fieldNumberCreateDate, createDate);
		writer.writeData();
	}

	static EmployeeGoalCommentJavaMe parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final EmployeeGoalCommentJavaMe.Builder builder = EmployeeGoalCommentJavaMe.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberAuthor:
				builder.setAuthor(reader.readString(fieldNumber));
				break;
			case fieldNumberComment:
				builder.setComment(reader.readString(fieldNumber));
				break;
			case fieldNumberCreateDate:
				builder.setCreateDate(reader.readLong(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		EmployeeGoalCommentJavaMe.unknownTagHandler = unknownTagHandler;
	}

	public static EmployeeGoalCommentJavaMe parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static EmployeeGoalCommentJavaMe parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static EmployeeGoalCommentJavaMe parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}