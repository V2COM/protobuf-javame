protected.compute.size.start = \n\t// Override\n\tprotected int computeSize() {\n\t\tint totalSize = 0;\n
protected.compute.size.fields = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3});\n
protected.compute.size.fields.list = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3}.{4}, {5});\n
protected.compute.size.fields.optional = \t\tif(has{0}) totalSize += {1}.compute{2}Size(fieldNumber{3}, {4});\n
protected.compute.size.end = \n\t\treturn totalSize;\n\t}\n

protected.writefields.start = \n\t// Override\n\tprotected void writeFields(final {0} writer) throws IOException '{'\n
protected.writefields.fields = \t\twriter.write{0}(fieldNumber{1}, {2});\n
protected.writefields.fields.list = \t\twriter.write{0}(fieldNumber{1}, {2}.{3}, {4});\n
protected.writefields.fields.optional = \t\tif(has{0}) writer.write{1}(fieldNumber{0}, {2});\n
protected.writefields.end = \t\twriter.writeData();\n\t}\n

private.static.parsefields.start = \n\tprivate static {0} parseFields(final {1} reader) throws IOException '{'\n\t\tint nextFieldNumber = reader.getNextFieldNumber();\n\t\tfinal {0}.Builder builder = new {0}.Builder();\n\n\t\twhile (nextFieldNumber > 0) '{'\n\t\t\tswitch (nextFieldNumber) '{'\n
private.static.parsefields.fields = \t\t\tcase fieldNumber{0}:\n\t\t\t\tbuilder.set{1}(reader.read{2}(nextFieldNumber));\n\t\t\t\tbreak;\n
private.static.parsefields.fields.list.object = \t\t\tcase fieldNumber{0}:\n\t\t\t\tbuilder.addElement{0}(reader.read{1}(nextFieldNumber));\n\t\t\t\tbreak;\n
private.static.parsefields.fields.list.primitive = \t\t\tcase fieldNumber{0}:\n\t\t\t\tbuilder.addElement{0}(new {1}(reader.read{2}(nextFieldNumber)));\n\t\t\t\tbreak;\n
private.static.parsefields.end = \t\t\tdefault:\n\t\t\t\t reader.getPreviousTagDataTypeAndReadContent();\n\t\t\t}\n\n\t\t\tnextFieldNumber = reader.getNextFieldNumber();\n\t\t}\n\n\t\treturn builder.build();\n\t}\n
