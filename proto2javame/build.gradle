defaultTasks 'clean', 'build', 'runFindbugs'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'maven'

ext.libDir = 'lib'
ext.libTestDir = libDir + '/test'

repositories {
  mavenCentral()
}

dependencies {
  // Main program dependencies
  compile fileTree(dir: libDir + '/build', includes: ['*.jar'])

   // Test dependencies
  testCompile fileTree(dir: libTestDir, includes: ['*.jar'])
}

sourceCompatibility = javaVersion
version = jarVersion
mainClassName = mainClass

compileTestJava.doFirst {
  print 'Compiling Java ME generated source code, this will cause warning messages.'
}

compileJava.doFirst {
  sourceSets.main.java.srcDirs = ['src/main/java', 'src/main/config']
}

jar {
  from configurations.compile.collect {
    it.isDirectory() ? it : zipTree(it).matching { exclude 'META-INF/MANIFEST.MF' };
  }
}



task runFindbugs << {
  findbugsHome = libDir + '/code-analysis/findbugs-1.3.9/'
  findbugsReport = 'doc/findbugs-reports/findbugs-report.txt'

  ant.taskdef(name: 'findbugs', classname: 'edu.umd.cs.findbugs.anttask.FindBugsTask') {
    classpath {
      fileset(dir: findbugsHome + libDir, includes: '*.jar')
    }
  }

  ant.findbugs(home: findbugsHome, output: 'emacs', outputFile: findbugsReport) {
    sourcepath(path: 'src/main/java')
    'class'(location: 'build/classes/main')
  }
}


def protobufJavaMeIntegrationList = [
        'src/test/resources/integration-test/IntegrationTestJavaMe.proto',
        'src/test/resources/integration-test/UpdatedIntegrationTestJavaMe.proto',
        'src/test/resources/integration-test/NoSpaceTest.proto',
        'src/test/resources/integration-test-enums/EnumTestJavaMe.proto',
        'src/test/resources/integration-test-nested-types/NestedTestJavaMe.proto',
        'src/test/resources/integration-test-nested-types/NestedListTestJavaMe.proto',
        'src/test/resources/integration-test-nested-types/SmallNestedObject.proto',
        'src/test/resources/integration-test/JunitTestMain.proto',
        'src/test/resources/integration-test/JUnitTestLarge.proto'
];


// To generate the Java SE source please use the script (file is inside the script folder)
task generateTestFilesJavaMe << {
  protobufJavaMeIntegrationList.each {protoFile ->
    println 'proto file: ' + protoFile

    ant.java(jar: libDir + '/generate/' + jarFileName + '-' + jarVersion + '.jar', fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: protoFile)
    }
  }
}


task packageSourceDist(type: Zip) {
  from 'src'
  appendix = 'source'
}