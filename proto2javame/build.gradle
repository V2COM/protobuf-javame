usePlugin 'java'
usePlugin 'eclipse'

repositories {
  mavenCentral()
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.7'
  testCompile fileTree(dir: 'lib/test', includes: ['*.jar'])
}

sourceCompatibility = javaVersion
version = jarVersion
manifest.mainAttributes(
        'Main-Class': mainClass
)

task generatedCompile << {
  sourceSets.test.classesDir.mkdirs()
  ant.javac(srcDir: 'src/test/generated', destDir: sourceSets.test.classesDir, classpath: 'lib/test/protobuf-javame-' + jarVersion + '.jar', source: javaVersion, target: javaVersion)
}


compileTestJava.dependsOn generatedCompile, compileJava



libDir = 'lib'
jarFile = 'proto2javame.jar'


createTask('generate-test-files') {
  // Creates the Google Protocol Buffer java source file, for integration tests
  ant.exec(executable: libDir + '/protobuf-compiler/protoc.exe') {
    arg(value: '--java_out=src/test/java')
    arg(value: 'src/test/resources/integration-test/IntegrationTestJavaSe.proto')
  }

  // Creates the updated Google Protocol Buffer java source file, for integration tests
  ant.exec(executable: libDir + '/protobuf-compiler/protoc.exe') {
    arg(value: '--java_out=src/test/java')
    arg(value: 'src/test/resources/integration-test/UpdatedIntegrationTestJavaSe.proto')
  }

  // Creates the Java ME source code files for unit tests
  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/integration-test/IntegrationTestJavaMe.proto')
  }

  // Creates the updated Java ME source code files for unit tests
  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/integration-test/UpdatedIntegrationTestJavaMe.proto')
  }

  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/tempfiles/JunitTestMain.proto')
  }

  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/tempfiles/JUnitTestLarge.proto')
  }
}

createTask('generate-test-files-javame-only') {
  // Creates the Java ME source code files for unit tests
  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/integration-test/IntegrationTestJavaMe.proto')
  }

  // Creates the updated Java ME source code files for unit tests
  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/integration-test/UpdatedIntegrationTestJavaMe.proto')
  }

  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/tempfiles/JunitTestMain.proto')
  }

  ant.java(jar: libTestDir + createJarFileName(), fork: 'true', failonerror: 'true') {
      arg(value: '--java_out=src/test/java')
      arg(value: 'src/test/resources/tempfiles/JUnitTestLarge.proto')
  }
}



private String createJarFileName() {
  return '/' + jarFileName + '-' + jarVersion + '.jar'
}