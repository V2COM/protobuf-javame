public.compute.size.start = \n\t// Override\n\tpublic int computeSize() {\n\t\tint totalSize = 0;\n
public.compute.size.fields = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3});\n
public.compute.size.fields.nested = \t\ttotalSize += computeNestedMessageSize();\n
public.compute.size.fields.list = \t\ttotalSize += {0}.compute{1}Size(fieldNumber{2}, {3}.{4}, {5});\n
public.compute.size.fields.optional = \t\tif(has{0}) totalSize += {1}.compute{2}Size(fieldNumber{3}, {4});\n
public.compute.size.end = \n\t\treturn totalSize;\n\t}\n

private.compute.message.size.start = \n\tprivate int computeNestedMessageSize() {\n\t\tint messageSize = 0;\n
private.compute.message.size.custom.type = \t\tmessageSize += {0}.computeMessageSize(fieldNumber{1}, {2}.computeSize());\n
private.compute.message.size.custom.type.list = \t\tmessageSize += {0}.computeListSize(fieldNumber{1}, {2}.DATA_TYPE_CUSTOM, {3});\n
private.compute.message.size.custom.type.optional = \t\tif(has{0}) messageSize += {1}.computeMessageSize(fieldNumber{2}, {3}.computeSize());\n
private.compute.message.size.end = \n\t\treturn messageSize;\n\t}\n

public.writefields.start = \n\t// Override\n\tpublic void writeFields(final {0} writer) throws IOException '{'\n
public.writefields.fields = \t\twriter.write{0}(fieldNumber{1}, {2});\n
public.writefields.fields.nested = \t\twriter.writeMessage(fieldNumber{0}, {1}.computeSize());\n\t\t{1}.writeFields(writer);\n
public.writefields.fields.list = \t\twriter.write{0}(fieldNumber{1}, {2}.{3}, {4});\n
public.writefields.fields.list.nested = \t\twriter.writeList(fieldNumber{0}, {1}.DATA_TYPE_CUSTOM, {2});\n
public.writefields.fields.optional = \t\tif(has{0}) writer.write{1}(fieldNumber{0}, {2});\n
public.writefields.fields.optional.nested = \t\tif(has{0}) '{' writer.writeMessage(fieldNumber{0}, {1}.computeSize()); {1}.writeFields(writer); '}'\n
public.writefields.end = \t\twriter.writeData();\n\t}\n

packageprotected.static.parsefields = \n\tstatic {0} parseFields(final {1} reader) throws IOException '{'\n\t\tint nextFieldNumber = getNextFieldNumber(reader);\n\t\tfinal {0}.Builder builder = {0}.newBuilder();\n\n\t\twhile (nextFieldNumber > 0) '{'\n\t\t\tpopulateBuilderWithField(reader, builder, nextFieldNumber);\n\t\t\tnextFieldNumber = getNextFieldNumber(reader);\n\t\t'}'\n\n\t\treturn builder.build();\n\t'}'\n

packageprotected.static.getnextfieldnumber = \tstatic int getNextFieldNumber(final {0} reader) throws IOException '{'\n\t\treturn reader.getNextFieldNumber();\n\t'}'\n

packageprotected.static.populatewithfield.start = \n\tstatic void populateBuilderWithField(final {0} reader, final Builder builder, final int fieldNumber) throws IOException '{'\n\t\tswitch (fieldNumber) '{'\n
packageprotected.static.populatewithfield.fields = \t\t\tcase fieldNumber{0}:\n\t\t\t\tbuilder.set{0}(reader.read{1}(fieldNumber));\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.list = \t\t\tcase fieldNumber{0}:\n\t\t\t\tbuilder.addElement{0}(reader.read{1}(fieldNumber));\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.nested = \t\t\tcase fieldNumber{0}:\n\t\t\t\treader.readMessageStart();\n\t\t\t\t{1}.Builder builder{0} = {1}.newBuilder();\n\t\t\t\t{1}.populateBuilderWithField(reader, builder{0}, getNextFieldNumber(reader));\n\t\t\t\tbuilder.set{0}(builder{0}.build());\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.fields.list.nested = \t\t\tcase fieldNumber{0}:\n\t\t\t\treader.readMessageStart();\n\t\t\t\t{1}.Builder builder{0} = {1}.newBuilder();\n\t\t\t\t{1}.populateBuilderWithField(reader, builder{0}, getNextFieldNumber(reader));\n\t\t\t\tbuilder.addElement{0}(builder{0}.build());\n\t\t\t\tbreak;\n
packageprotected.static.populatewithfield.end = \t\tdefault:\n\t\t\treader.getPreviousTagDataTypeAndReadContent();\n\t\t}\n\t}\n