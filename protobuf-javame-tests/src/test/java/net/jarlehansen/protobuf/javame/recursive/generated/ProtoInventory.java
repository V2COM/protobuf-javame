package net.jarlehansen.protobuf.javame.recursive.generated;
// Generated by proto2javame, Thu Feb 17 21:54:32 CET 2011.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class ProtoInventory extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;

	private final ProtoProduct product;
	private static final int fieldNumberProduct = 2;
	private final boolean hasProduct;

	private final ProtoData data;
	private static final int fieldNumberData = 3;
	private final boolean hasData;


	public static Builder newBuilder() {
		return new Builder();
	}

	private ProtoInventory(final Builder builder) {
		if (builder.hasId ) {
			this.id = builder.id;
			this.product = builder.product;
			this.hasProduct = builder.hasProduct;
			this.data = builder.data;
			this.hasData = builder.hasData;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" id:" + builder.hasId + "");
		}
	}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private ProtoProduct product;
		private boolean hasProduct = false;

		private ProtoData data;
		private boolean hasData = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setProduct(final ProtoProduct product) {
			this.product = product;
			this.hasProduct = true;
			return this;
		}

		public Builder setData(final ProtoData data) {
			this.data = data;
			this.hasData = true;
			return this;
		}

		public ProtoInventory build() {
			return new ProtoInventory(this);
		}
	}

	public int getId() {
		return id;
	}

	public ProtoProduct getProduct() {
		return product;
	}

	public boolean hasProduct() {
		return hasProduct;
	}

	public ProtoData getData() {
		return data;
	}

	public boolean hasData() {
		return hasData;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "id = " + this.id + TAB;
		if(hasProduct) retValue += "product = " + this.product + TAB;
		if(hasData) retValue += "data = " + this.data + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasProduct) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberProduct, product.computeSize());
		if(hasData) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberData, data.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberId, id);
		if(hasProduct) { writer.writeMessage(fieldNumberProduct, product.computeSize()); product.writeFields(writer); }
		if(hasData) { writer.writeMessage(fieldNumberData, data.computeSize()); data.writeFields(writer); }
		writer.writeData();
	}

	static ProtoInventory parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final ProtoInventory.Builder builder = ProtoInventory.newBuilder();

		while (nextFieldNumber > 0) {
			populateBuilderWithField(reader, builder, nextFieldNumber);
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberProduct:
				Vector vcProduct = reader.readMessages(fieldNumberProduct);
				for(int i = 0 ; i < vcProduct.size(); i++) {
					byte[] eachBinData = (byte[]) vcProduct.elementAt(i);
					ProtoProduct.Builder builderProduct = ProtoProduct.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolProduct = true;
					int nestedFieldProduct = -1;
					while(boolProduct) {
						nestedFieldProduct = getNextFieldNumber(innerInputReader);
						boolProduct = ProtoProduct.populateBuilderWithField(innerInputReader, builderProduct, nestedFieldProduct);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setProduct(builderProduct.build());
				}
				break;
			case fieldNumberData:
				Vector vcData = reader.readMessages(fieldNumberData);
				for(int i = 0 ; i < vcData.size(); i++) {
					byte[] eachBinData = (byte[]) vcData.elementAt(i);
					ProtoData.Builder builderData = ProtoData.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolData = true;
					int nestedFieldData = -1;
					while(boolData) {
						nestedFieldData = getNextFieldNumber(innerInputReader);
						boolData = ProtoData.populateBuilderWithField(innerInputReader, builderData, nestedFieldData);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setData(builderData.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ProtoInventory.unknownTagHandler = unknownTagHandler;
	}

	public static ProtoInventory parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static ProtoInventory parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static ProtoInventory parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}