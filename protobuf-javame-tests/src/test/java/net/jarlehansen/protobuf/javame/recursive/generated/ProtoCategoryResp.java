package net.jarlehansen.protobuf.javame.recursive.generated;
// Generated by proto2javame, Wed Feb 23 17:06:07 CET 2011.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class ProtoCategoryResp extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int type;
	private static final int fieldNumberType = 1;

	private final ProtoCategory cat;
	private static final int fieldNumberCat = 2;
	private final boolean hasCat;

	private final java.util.Vector inv;
	private static final int fieldNumberInv = 3;

	private final ProtoMisc misc;
	private static final int fieldNumberMisc = 4;
	private final boolean hasMisc;


	public static Builder newBuilder() {
		return new Builder();
	}

	private ProtoCategoryResp(final Builder builder) {
		if (builder.hasType ) {
			this.type = builder.type;
			this.cat = builder.cat;
			this.hasCat = builder.hasCat;
			this.inv = builder.inv;
			this.misc = builder.misc;
			this.hasMisc = builder.hasMisc;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" type:" + builder.hasType + "");
		}
	}

	public static class Builder {
		private int type;
		private boolean hasType = false;

		private ProtoCategory cat;
		private boolean hasCat = false;

		private java.util.Vector inv = new java.util.Vector();
		private boolean hasInv = false;

		private ProtoMisc misc;
		private boolean hasMisc = false;


		private Builder() {
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Builder setCat(final ProtoCategory cat) {
			this.cat = cat;
			this.hasCat = true;
			return this;
		}

		public Builder setInv(final java.util.Vector inv) {
			if(!hasInv) {
				hasInv = true;
			}
			this.inv = inv;
			return this;
		}


		public Builder addElementInv(final ProtoInventory element) {
			if(!hasInv) {
				hasInv = true;
			}
			inv.addElement(element);
			return this;
		}

		public Builder setMisc(final ProtoMisc misc) {
			this.misc = misc;
			this.hasMisc = true;
			return this;
		}

		public ProtoCategoryResp build() {
			return new ProtoCategoryResp(this);
		}
	}

	public int getType() {
		return type;
	}

	public ProtoCategory getCat() {
		return cat;
	}

	public boolean hasCat() {
		return hasCat;
	}

	public java.util.Vector getInv() {
		return inv;
	}

	public ProtoMisc getMisc() {
		return misc;
	}

	public boolean hasMisc() {
		return hasMisc;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "type = " + this.type + TAB;
		if(hasCat) retValue += "cat = " + this.cat + TAB;
		retValue += "inv = " + this.inv + TAB;
		if(hasMisc) retValue += "misc = " + this.misc + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasCat) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberCat, cat.computeSize());
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberInv, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, inv);
		if(hasMisc) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberMisc, misc.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeInt(fieldNumberType, type);
		if(hasCat) { writer.writeMessage(fieldNumberCat, cat.computeSize()); cat.writeFields(writer); }
		writer.writeList(fieldNumberInv, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, inv);
		if(hasMisc) { writer.writeMessage(fieldNumberMisc, misc.computeSize()); misc.writeFields(writer); }
		writer.writeData();
	}

	static ProtoCategoryResp parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final ProtoCategoryResp.Builder builder = ProtoCategoryResp.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
			case fieldNumberCat:
				Vector vcCat = reader.readMessages(fieldNumberCat);
				for(int i = 0 ; i < vcCat.size(); i++) {
					byte[] eachBinData = (byte[]) vcCat.elementAt(i);
					ProtoCategory.Builder builderCat = ProtoCategory.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolCat = true;
					int nestedFieldCat = -1;
					while(boolCat) {
						nestedFieldCat = getNextFieldNumber(innerInputReader);
						boolCat = ProtoCategory.populateBuilderWithField(innerInputReader, builderCat, nestedFieldCat);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setCat(builderCat.build());
				}
				break;
			case fieldNumberInv:
				Vector vcInv = reader.readMessages(fieldNumberInv);
				for(int i = 0 ; i < vcInv.size(); i++) {
					byte[] eachBinData = (byte[]) vcInv.elementAt(i);
					ProtoInventory.Builder builderInv = ProtoInventory.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolInv = true;
					int nestedFieldInv = -1;
					while(boolInv) {
						nestedFieldInv = getNextFieldNumber(innerInputReader);
						boolInv = ProtoInventory.populateBuilderWithField(innerInputReader, builderInv, nestedFieldInv);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementInv(builderInv.build());
				}
				break;
			case fieldNumberMisc:
				Vector vcMisc = reader.readMessages(fieldNumberMisc);
				for(int i = 0 ; i < vcMisc.size(); i++) {
					byte[] eachBinData = (byte[]) vcMisc.elementAt(i);
					ProtoMisc.Builder builderMisc = ProtoMisc.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolMisc = true;
					int nestedFieldMisc = -1;
					while(boolMisc) {
						nestedFieldMisc = getNextFieldNumber(innerInputReader);
						boolMisc = ProtoMisc.populateBuilderWithField(innerInputReader, builderMisc, nestedFieldMisc);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setMisc(builderMisc.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ProtoCategoryResp.unknownTagHandler = unknownTagHandler;
	}

	public static ProtoCategoryResp parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static ProtoCategoryResp parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static ProtoCategoryResp parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}