package net.jarlehansen.protobuf.javame.generated;
// Generated by proto2javame, Thu Feb 17 21:54:29 CET 2011.

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class ListTestObject extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector one;
	private static final int fieldNumberOne = 1;

	private final java.util.Vector two;
	private static final int fieldNumberTwo = 2;

	private final java.util.Vector three;
	private static final int fieldNumberThree = 3;

	private final java.util.Vector four;
	private static final int fieldNumberFour = 4;

	private final java.util.Vector five;
	private static final int fieldNumberFive = 5;

	private final java.util.Vector six;
	private static final int fieldNumberSix = 6;

	private final java.util.Vector seven;
	private static final int fieldNumberSeven = 7;


	public static Builder newBuilder() {
		return new Builder();
	}

	private ListTestObject(final Builder builder) {
		if (true) {
			this.one = builder.one;
			this.two = builder.two;
			this.three = builder.three;
			this.four = builder.four;
			this.five = builder.five;
			this.six = builder.six;
			this.seven = builder.seven;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				"");
		}
	}

	public static class Builder {
		private java.util.Vector one = new java.util.Vector();
		private boolean hasOne = false;

		private java.util.Vector two = new java.util.Vector();
		private boolean hasTwo = false;

		private java.util.Vector three = new java.util.Vector();
		private boolean hasThree = false;

		private java.util.Vector four = new java.util.Vector();
		private boolean hasFour = false;

		private java.util.Vector five = new java.util.Vector();
		private boolean hasFive = false;

		private java.util.Vector six = new java.util.Vector();
		private boolean hasSix = false;

		private java.util.Vector seven = new java.util.Vector();
		private boolean hasSeven = false;


		private Builder() {
		}

		public Builder setOne(final java.util.Vector one) {
			if(!hasOne) {
				hasOne = true;
			}
			this.one = one;
			return this;
		}


		public Builder addElementOne(final int element) {
			if(!hasOne) {
				hasOne = true;
			}
			one.addElement(new Integer(element));
			return this;
		}

		public Builder setTwo(final java.util.Vector two) {
			if(!hasTwo) {
				hasTwo = true;
			}
			this.two = two;
			return this;
		}


		public Builder addElementTwo(final long element) {
			if(!hasTwo) {
				hasTwo = true;
			}
			two.addElement(new Long(element));
			return this;
		}

		public Builder setThree(final java.util.Vector three) {
			if(!hasThree) {
				hasThree = true;
			}
			this.three = three;
			return this;
		}


		public Builder addElementThree(final double element) {
			if(!hasThree) {
				hasThree = true;
			}
			three.addElement(new Double(element));
			return this;
		}

		public Builder setFour(final java.util.Vector four) {
			if(!hasFour) {
				hasFour = true;
			}
			this.four = four;
			return this;
		}


		public Builder addElementFour(final String element) {
			if(!hasFour) {
				hasFour = true;
			}
			four.addElement(element);
			return this;
		}

		public Builder setFive(final java.util.Vector five) {
			if(!hasFive) {
				hasFive = true;
			}
			this.five = five;
			return this;
		}


		public Builder addElementFive(final net.jarlehansen.protobuf.javame.ByteString element) {
			if(!hasFive) {
				hasFive = true;
			}
			five.addElement(element);
			return this;
		}

		public Builder setSix(final java.util.Vector six) {
			if(!hasSix) {
				hasSix = true;
			}
			this.six = six;
			return this;
		}


		public Builder addElementSix(final float element) {
			if(!hasSix) {
				hasSix = true;
			}
			six.addElement(new Float(element));
			return this;
		}

		public Builder setSeven(final java.util.Vector seven) {
			if(!hasSeven) {
				hasSeven = true;
			}
			this.seven = seven;
			return this;
		}


		public Builder addElementSeven(final boolean element) {
			if(!hasSeven) {
				hasSeven = true;
			}
			seven.addElement(new Boolean(element));
			return this;
		}

		public ListTestObject build() {
			return new ListTestObject(this);
		}
	}

	public java.util.Vector getOne() {
		return one;
	}

	public java.util.Vector getTwo() {
		return two;
	}

	public java.util.Vector getThree() {
		return three;
	}

	public java.util.Vector getFour() {
		return four;
	}

	public java.util.Vector getFive() {
		return five;
	}

	public java.util.Vector getSix() {
		return six;
	}

	public java.util.Vector getSeven() {
		return seven;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "one = " + this.one + TAB;
		retValue += "two = " + this.two + TAB;
		retValue += "three = " + this.three + TAB;
		retValue += "four = " + this.four + TAB;
		retValue += "five = " + this.five + TAB;
		retValue += "six = " + this.six + TAB;
		retValue += "seven = " + this.seven + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberOne, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, one);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTwo, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_LONG, two);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberThree, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_DOUBLE, three);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberFour, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, four);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberFive, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BYTESTRING, five);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberSix, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_FLOAT, six);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberSeven, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, seven);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberOne, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, one);
		writer.writeList(fieldNumberTwo, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_LONG, two);
		writer.writeList(fieldNumberThree, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_DOUBLE, three);
		writer.writeList(fieldNumberFour, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_STRING, four);
		writer.writeList(fieldNumberFive, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BYTESTRING, five);
		writer.writeList(fieldNumberSix, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_FLOAT, six);
		writer.writeList(fieldNumberSeven, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_BOOLEAN, seven);
		writer.writeData();
	}

	static ListTestObject parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final ListTestObject.Builder builder = ListTestObject.newBuilder();

		while (nextFieldNumber > 0) {
			populateBuilderWithField(reader, builder, nextFieldNumber);
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}
	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberOne:
				builder.addElementOne(reader.readInt(fieldNumber));
				break;
			case fieldNumberTwo:
				builder.addElementTwo(reader.readLong(fieldNumber));
				break;
			case fieldNumberThree:
				builder.addElementThree(reader.readDouble(fieldNumber));
				break;
			case fieldNumberFour:
				builder.addElementFour(reader.readString(fieldNumber));
				break;
			case fieldNumberFive:
				builder.addElementFive(reader.readByteString(fieldNumber));
				break;
			case fieldNumberSix:
				builder.addElementSix(reader.readFloat(fieldNumber));
				break;
			case fieldNumberSeven:
				builder.addElementSeven(reader.readBoolean(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		ListTestObject.unknownTagHandler = unknownTagHandler;
	}

	public static ListTestObject parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static ListTestObject parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static ListTestObject parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}